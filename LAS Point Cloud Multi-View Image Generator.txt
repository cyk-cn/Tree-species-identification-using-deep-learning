# LAS Point Cloud Multi-View Image Generator
# Generates 2D perspective views from 3D point clouds
# Open Source under MIT License
# Dependencies: lidR, rgl, magick

library(lidR)
library(rgl)
library(magick)

# Function: save_point_cloud_view()
# Description: Renders 2D perspective image from point cloud at specified azimuth
# Parameters:
#   las_data - LAS object (lidR point cloud)
#   angle    - Azimuth angle (0-360 degrees)
#   filename - Output PNG file path
#   size     - Image dimensions (default 512px)
#   pt_size  - Point size in visualization (default 1.5)
save_point_cloud_view <- function(las_data, angle, filename, size = 512, pt_size = 1.5) {
  tryCatch({
    # Initialize 3D rendering window
    rgl::open3d(windowRect = c(0, 0, size, size))
    rgl::clear3d()
    
    # 1. Render point cloud with classification colors
    plot(las_data, 
         color = "Classification", 
         axis = FALSE, 
         legend = FALSE, 
         size = pt_size)
    
    # 2. Calculate camera parameters
    z_min <- min(las_data$Z)
    tree_height <- max(las_data$Z) - z_min
    radius <- max(1.5 * tree_height, 3)  # Minimum 3m radius
    height <- z_min + 0.5 * tree_height
    
    # 3. Compute rotation matrices
    rot_z <- rotationMatrix(angle * pi/180, 0, 0, 1)
    rot_up <- rotationMatrix(-pi/2, 1, 0, 0)
    user_matrix <- rot_up %*% rot_z
    
    # 4. Calculate camera position
    theta <- angle * pi/180
    x <- radius * sin(theta)
    y <- -radius * cos(theta)
    
    # 5. Set camera perspective
    rgl::view3d(
      userMatrix = user_matrix,
      zoom = 0.8,
      fov = 60
    )
    
    # 6. Render and save image
    Sys.sleep(2)  # Ensure proper rendering
    temp_file <- tempfile(fileext = ".png")
    rgl.snapshot(temp_file)
    rgl::close3d()
    
    # 7. Process image (invert colors)
    img <- magick::image_read(temp_file)
    img <- magick::image_negate(img)
    magick::image_write(img, filename)
    unlink(temp_file)
    
  }, error = function(e) {
    message("Error processing view: ", e$message)
    if (exists("user_matrix")) rgl::close3d()
  })
}

# Function: generate_multi_view_images()
# Description: Batch processes LAS files to generate multi-angle images
# Parameters:
#   input_dir  - Directory containing LAS files
#   output_dir - Output directory for images
#   angles     - Vector of azimuth angles (default: 12 views at 30Â° intervals)
generate_multi_view_images <- function(input_dir, output_dir, angles = seq(0, 330, by = 30)) {
  # Validate directories
  if (!dir.exists(input_dir)) stop("Input directory not found")
  dir.create(output_dir, showWarnings = FALSE, recursive = TRUE)
  
  # Get LAS files
  las_files <- list.files(input_dir, pattern = "\\.las$", full.names = TRUE)
  total_files <- length(las_files)
  
  if (total_files == 0) {
    message("No LAS files found in ", input_dir)
    return(invisible(NULL))
  }
  
  # Process each LAS file
  processed_files <- 0
  for (las_file in las_files) {
    tree_name <- tools::file_path_sans_ext(basename(las_file))
    message("Processing: ", tree_name, " (", processed_files + 1, "/", total_files, ")")
    
    tryCatch({
      # Read and preprocess point cloud
      las_data <- readLAS(las_file)
      
      # Center coordinates (XY origin at centroid, Z origin at ground)
      las_data$X <- las_data$X - mean(las_data$X)
      las_data$Y <- las_data$Y - mean(las_data$Y)
      las_data$Z <- las_data$Z - min(las_data$Z)
      
      # Generate each view
      for (angle in angles) {
        output_file <- file.path(
          output_dir, 
          sprintf("%s_view%03d.png", tree_name, angle)
        )
        save_point_cloud_view(las_data, angle, output_file)
      }
      
      processed_files <- processed_files + 1
      message("Created ", length(angles), " views for ", tree_name)
      
    }, error = function(e) {
      message("Error processing ", las_file, ": ", e$message)
    }, finally = {
      if(exists("las_data")) rm(las_data)
      gc()
    })
  }
  
  message("\nProcessed ", processed_files, "/", total_files, " files successfully")
  message("Created ", processed_files * length(angles), " image views")
}

# --- EXAMPLE USAGE ---
if (FALSE) {  # Disabled by default - remove if(FALSE) to enable
  generate_multi_view_images(
    input_dir = "path/to/las_files",
    output_dir = "path/to/output_images"
  )
}